#!/usr/bin/env python
"""Generate a benchmark post from the latest benchmark data and optionally publish it to Hive."""

import argparse
import json
import logging
import os
import sys
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv

from {PACKAGE_NAME}.blockchain import post_to_hive
from {PACKAGE_NAME}.post_generation import generate_post

# Constants for this project
DB_FILE = "{PROJECT_NAME}_benchmark_history.db"
POST_FILE = "{PROJECT_NAME}_benchmark_post.md"
META_FILE = "{PROJECT_NAME}_benchmark_metadata.json"
DAYS_HISTORY = 7


def get_project_root() -> Path:
    """Get the absolute path to the project root directory."""
    current_file = Path(__file__).resolve()
    # Go up three levels from src/{package}/cli/generate_post.py to reach project root
    return current_file.parent.parent.parent.parent


def main():
    """Main entry point for generating benchmark posts and optionally publishing to Hive."""
    # Load environment variables from .env file
    load_dotenv()
    
    # Set up argument parsing
    parser = argparse.ArgumentParser(
        description="Generate a markdown post from benchmark results"
    )
    parser.add_argument(
        "--output",
        "-o",
        default=POST_FILE,
        help=f"Output markdown file (default: {POST_FILE})",
    )
    parser.add_argument(
        "--db",
        "-d",
        default=DB_FILE,
        help=f"SQLite database file with historical data (default: {DB_FILE})",
    )
    parser.add_argument(
        "--json",
        "-j",
        default=META_FILE,
        help=f"Path to save the post metadata JSON (default: {META_FILE})",
    )
    parser.add_argument(
        "--days",
        "-t",
        type=int,
        default=DAYS_HISTORY,
        help=f"Number of days of historical data to include (default: {DAYS_HISTORY})",
    )
    parser.add_argument(
        "--verbose", "-v", action="store_true", help="Enable verbose logging"
    )
    parser.add_argument(
        "--post", "-p", action="store_true", help="Post the generated content to Hive"
    )
    parser.add_argument(
        "--permlink",
        help="Custom permlink for the post (default: auto-generated from title)",
    )
    parser.add_argument("--community", help="Community to post to (optional)")
    parser.add_argument(
        "--tags",
        help="Comma-separated list of tags (default: {DEFAULT_TAGS_STR})",
    )
    # Add any project-specific arguments here
    {PROJECT_SPECIFIC_POST_ARGS}

    # Parse arguments
    args = parser.parse_args()

    # Configure logging
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(
        level=log_level, format="%(asctime)s - %(levelname)s - %(message)s"
    )

    # Check if database exists
    if not os.path.exists(args.db):
        logging.warning(
            f"Database '{args.db}' not found. A new database will be created, but no historical data will be available."
        )

    # Generate the post using post_generation module
    try:
        # Adjust path if not absolute
        db_path = args.db
        if not os.path.isabs(db_path):
            db_path = os.path.join(get_project_root(), db_path)
            
        output_file = args.output
        if not os.path.isabs(output_file):
            output_file = os.path.join(get_project_root(), output_file)
            
        json_path = args.json
        if not os.path.isabs(json_path):
            json_path = os.path.join(get_project_root(), json_path)
            
        content, metadata = generate_post(
            output_file=output_file, db_path=db_path, days=args.days
        )
        logging.info(f"Generated post content and saved to {output_file}")
        
        # Save metadata to JSON file
        with open(json_path, "w") as f:
            json.dump(metadata, f, indent=2)
        logging.info(f"Metadata saved to {json_path}")

        # Post to Hive if requested
        if args.post:
            # Parse tags if provided
            tags = None
            if args.tags:
                tags = [tag.strip() for tag in args.tags.split(",")]

            # Generate a permlink if not provided
            permlink = args.permlink
            if not permlink and "title" in metadata:
                # Create a permlink from the title
                date_str = datetime.now().strftime("%Y%m%d")
                title_slug = metadata["title"].lower().replace(" ", "-").replace("/", "-")
                # Remove excessive -
                title_slug = title_slug.replace("---", "-")
                # Remove special characters
                import re
                title_slug = re.sub(r"[^a-z0-9-]", "", title_slug)
                permlink = f"{date_str}-{title_slug}"

            # Post to Hive
            try:
                result = post_to_hive(
                    content=content,
                    metadata=metadata,
                    permlink=permlink,
                    tags=tags,
                    community=args.community,
                    beneficiaries=None,  # No beneficiaries for now
                )

                logging.info("Successfully posted to Hive")
                print("\nSuccessfully posted to Hive!")
                if permlink and os.getenv("HIVE_ACCOUNT"):
                    print(f"View your post at: https://peakd.com/@{os.getenv('HIVE_ACCOUNT')}/{permlink}")
            except Exception as e:
                logging.error(f"Failed to post to Hive: {e}")
                print(f"\nFailed to post to Hive: {e}")

        # Print summary information
        print("\nPost Generation Summary:")
        print(f"Generated post saved to: {output_file}")
        
        # Project-specific summary printing
        {PROJECT_SPECIFIC_POST_SUMMARY}

        return 0
    except Exception as e:
        logging.error(f"Error generating post: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())